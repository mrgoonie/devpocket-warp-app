// Mocks generated by Mockito 5.4.6 from annotations
// in devpocket_warp_app/test/security/security_test_suite.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:typed_data' as _i6;

import 'package:devpocket_warp_app/models/enhanced_ssh_models.dart' as _i4;
import 'package:devpocket_warp_app/models/user_model.dart' as _i12;
import 'package:devpocket_warp_app/services/command_validator.dart' as _i11;
import 'package:devpocket_warp_app/services/crypto_service.dart' as _i2;
import 'package:devpocket_warp_app/services/enhanced_auth_service.dart' as _i5;
import 'package:devpocket_warp_app/services/secure_ssh_service.dart' as _i3;
import 'package:devpocket_warp_app/services/secure_storage_service.dart' as _i9;
import 'package:local_auth/local_auth.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEncryptedData_0 extends _i1.SmartFake implements _i2.EncryptedData {
  _FakeEncryptedData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEncryptedSSHKey_1 extends _i1.SmartFake
    implements _i2.EncryptedSSHKey {
  _FakeEncryptedSSHKey_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSSHKeyPair_2 extends _i1.SmartFake implements _i2.SSHKeyPair {
  _FakeSSHKeyPair_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSecureSSHConnection_3 extends _i1.SmartFake
    implements _i3.SecureSSHConnection {
  _FakeSecureSSHConnection_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSecureSSHKey_4 extends _i1.SmartFake implements _i4.SecureSSHKey {
  _FakeSecureSSHKey_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEnhancedAuthResult_5 extends _i1.SmartFake
    implements _i5.EnhancedAuthResult {
  _FakeEnhancedAuthResult_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTwoFactorSetupResult_6 extends _i1.SmartFake
    implements _i5.TwoFactorSetupResult {
  _FakeTwoFactorSetupResult_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthSecurityStatus_7 extends _i1.SmartFake
    implements _i5.AuthSecurityStatus {
  _FakeAuthSecurityStatus_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CryptoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptoService extends _i1.Mock implements _i2.CryptoService {
  MockCryptoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Uint8List generateSalt() => (super.noSuchMethod(
        Invocation.method(
          #generateSalt,
          [],
        ),
        returnValue: _i6.Uint8List(0),
      ) as _i6.Uint8List);

  @override
  _i6.Uint8List generateIV() => (super.noSuchMethod(
        Invocation.method(
          #generateIV,
          [],
        ),
        returnValue: _i6.Uint8List(0),
      ) as _i6.Uint8List);

  @override
  _i6.Uint8List deriveKeyFromPassword(
    String? password,
    _i6.Uint8List? salt,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deriveKeyFromPassword,
          [
            password,
            salt,
          ],
        ),
        returnValue: _i6.Uint8List(0),
      ) as _i6.Uint8List);

  @override
  _i7.Future<_i2.EncryptedData> encryptAESGCM(
    _i6.Uint8List? data,
    _i6.Uint8List? key, {
    _i6.Uint8List? associatedData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #encryptAESGCM,
          [
            data,
            key,
          ],
          {#associatedData: associatedData},
        ),
        returnValue: _i7.Future<_i2.EncryptedData>.value(_FakeEncryptedData_0(
          this,
          Invocation.method(
            #encryptAESGCM,
            [
              data,
              key,
            ],
            {#associatedData: associatedData},
          ),
        )),
      ) as _i7.Future<_i2.EncryptedData>);

  @override
  _i7.Future<_i6.Uint8List> decryptAESGCM(
    _i2.EncryptedData? encryptedData,
    _i6.Uint8List? key, {
    _i6.Uint8List? associatedData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #decryptAESGCM,
          [
            encryptedData,
            key,
          ],
          {#associatedData: associatedData},
        ),
        returnValue: _i7.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i7.Future<_i6.Uint8List>);

  @override
  _i7.Future<_i2.EncryptedSSHKey> encryptSSHKey(
    String? privateKey,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #encryptSSHKey,
          [
            privateKey,
            password,
          ],
        ),
        returnValue:
            _i7.Future<_i2.EncryptedSSHKey>.value(_FakeEncryptedSSHKey_1(
          this,
          Invocation.method(
            #encryptSSHKey,
            [
              privateKey,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i2.EncryptedSSHKey>);

  @override
  _i7.Future<String> decryptSSHKey(
    _i2.EncryptedSSHKey? encryptedSSHKey,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #decryptSSHKey,
          [
            encryptedSSHKey,
            password,
          ],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #decryptSSHKey,
            [
              encryptedSSHKey,
              password,
            ],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i2.SSHKeyPair> generateSSHKeyPairRSA({int? keySize = 4096}) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateSSHKeyPairRSA,
          [],
          {#keySize: keySize},
        ),
        returnValue: _i7.Future<_i2.SSHKeyPair>.value(_FakeSSHKeyPair_2(
          this,
          Invocation.method(
            #generateSSHKeyPairRSA,
            [],
            {#keySize: keySize},
          ),
        )),
      ) as _i7.Future<_i2.SSHKeyPair>);

  @override
  _i7.Future<_i2.SSHKeyPair> generateSSHKeyPairEd25519() => (super.noSuchMethod(
        Invocation.method(
          #generateSSHKeyPairEd25519,
          [],
        ),
        returnValue: _i7.Future<_i2.SSHKeyPair>.value(_FakeSSHKeyPair_2(
          this,
          Invocation.method(
            #generateSSHKeyPairEd25519,
            [],
          ),
        )),
      ) as _i7.Future<_i2.SSHKeyPair>);

  @override
  String calculateSSHFingerprint(String? publicKey) => (super.noSuchMethod(
        Invocation.method(
          #calculateSSHFingerprint,
          [publicKey],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #calculateSSHFingerprint,
            [publicKey],
          ),
        ),
      ) as String);

  @override
  String calculateMD5Fingerprint(String? publicKey) => (super.noSuchMethod(
        Invocation.method(
          #calculateMD5Fingerprint,
          [publicKey],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #calculateMD5Fingerprint,
            [publicKey],
          ),
        ),
      ) as String);

  @override
  bool verifyHostKey(
    String? publicKey,
    String? expectedFingerprint,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyHostKey,
          [
            publicKey,
            expectedFingerprint,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  void clearSensitiveData(dynamic data) => super.noSuchMethod(
        Invocation.method(
          #clearSensitiveData,
          [data],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SecureStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageService extends _i1.Mock
    implements _i9.SecureStorageService {
  MockSecureStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> storeSecure({
    required String? key,
    required String? value,
    bool? requireBiometric = false,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeSecure,
          [],
          {
            #key: key,
            #value: value,
            #requireBiometric: requireBiometric,
            #metadata: metadata,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String?> getSecure(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getSecure,
          [key],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<void> storeSSHKey({
    required String? keyId,
    required String? privateKey,
    required String? passphrase,
    bool? requireBiometric = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeSSHKey,
          [],
          {
            #keyId: keyId,
            #privateKey: privateKey,
            #passphrase: passphrase,
            #requireBiometric: requireBiometric,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String?> getSSHKey(
    String? keyId,
    String? passphrase,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSSHKey,
          [
            keyId,
            passphrase,
          ],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<void> storeAPIKey({
    required String? keyName,
    required String? apiKey,
    bool? requireBiometric = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeAPIKey,
          [],
          {
            #keyName: keyName,
            #apiKey: apiKey,
            #requireBiometric: requireBiometric,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String?> getAPIKey(String? keyName) => (super.noSuchMethod(
        Invocation.method(
          #getAPIKey,
          [keyName],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<void> storeHostFingerprint({
    required String? hostname,
    required String? fingerprint,
    required String? keyType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeHostFingerprint,
          [],
          {
            #hostname: hostname,
            #fingerprint: fingerprint,
            #keyType: keyType,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i9.HostKeyFingerprint?> getHostFingerprint(String? hostname) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHostFingerprint,
          [hostname],
        ),
        returnValue: _i7.Future<_i9.HostKeyFingerprint?>.value(),
      ) as _i7.Future<_i9.HostKeyFingerprint?>);

  @override
  _i7.Future<void> updateHostFingerprintVerification(String? hostname) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHostFingerprintVerification,
          [hostname],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<String>> listStoredKeys() => (super.noSuchMethod(
        Invocation.method(
          #listStoredKeys,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<void> deleteKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteKey,
          [key],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> isBiometricAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isBiometricAvailable,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<List<_i10.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableBiometrics,
          [],
        ),
        returnValue:
            _i7.Future<List<_i10.BiometricType>>.value(<_i10.BiometricType>[]),
      ) as _i7.Future<List<_i10.BiometricType>>);
}

/// A class which mocks [SecureSSHService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureSSHService extends _i1.Mock implements _i3.SecureSSHService {
  MockSecureSSHService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i3.SecurityEvent> get securityEvents => (super.noSuchMethod(
        Invocation.getter(#securityEvents),
        returnValue: _i7.Stream<_i3.SecurityEvent>.empty(),
      ) as _i7.Stream<_i3.SecurityEvent>);

  @override
  _i7.Future<_i3.SecureSSHConnection> connect(
    _i4.SecureHost? host, {
    String? passphrase,
    bool? validateCommands = true,
    _i11.ValidationLevel? commandValidationLevel = _i11.ValidationLevel.strict,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [host],
          {
            #passphrase: passphrase,
            #validateCommands: validateCommands,
            #commandValidationLevel: commandValidationLevel,
          },
        ),
        returnValue: _i7.Future<_i3.SecureSSHConnection>.value(
            _FakeSecureSSHConnection_3(
          this,
          Invocation.method(
            #connect,
            [host],
            {
              #passphrase: passphrase,
              #validateCommands: validateCommands,
              #commandValidationLevel: commandValidationLevel,
            },
          ),
        )),
      ) as _i7.Future<_i3.SecureSSHConnection>);

  @override
  _i7.Future<_i3.SecureSSHConnection> connectWithJumpHost(
    _i4.SecureHost? target,
    _i4.SecureHost? jumpHost, {
    String? targetPassphrase,
    String? jumpPassphrase,
    bool? validateCommands = true,
    _i11.ValidationLevel? commandValidationLevel = _i11.ValidationLevel.strict,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connectWithJumpHost,
          [
            target,
            jumpHost,
          ],
          {
            #targetPassphrase: targetPassphrase,
            #jumpPassphrase: jumpPassphrase,
            #validateCommands: validateCommands,
            #commandValidationLevel: commandValidationLevel,
          },
        ),
        returnValue: _i7.Future<_i3.SecureSSHConnection>.value(
            _FakeSecureSSHConnection_3(
          this,
          Invocation.method(
            #connectWithJumpHost,
            [
              target,
              jumpHost,
            ],
            {
              #targetPassphrase: targetPassphrase,
              #jumpPassphrase: jumpPassphrase,
              #validateCommands: validateCommands,
              #commandValidationLevel: commandValidationLevel,
            },
          ),
        )),
      ) as _i7.Future<_i3.SecureSSHConnection>);

  @override
  _i7.Future<_i4.SecureSSHKey> generateKeyPair({
    required String? name,
    String? keyType = 'ed25519',
    int? keySize,
    String? passphrase,
    String? comment,
    Duration? expirationDuration,
    _i4.SecurityLevel? securityLevel = _i4.SecurityLevel.high,
    bool? requiresBiometric = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateKeyPair,
          [],
          {
            #name: name,
            #keyType: keyType,
            #keySize: keySize,
            #passphrase: passphrase,
            #comment: comment,
            #expirationDuration: expirationDuration,
            #securityLevel: securityLevel,
            #requiresBiometric: requiresBiometric,
          },
        ),
        returnValue: _i7.Future<_i4.SecureSSHKey>.value(_FakeSecureSSHKey_4(
          this,
          Invocation.method(
            #generateKeyPair,
            [],
            {
              #name: name,
              #keyType: keyType,
              #keySize: keySize,
              #passphrase: passphrase,
              #comment: comment,
              #expirationDuration: expirationDuration,
              #securityLevel: securityLevel,
              #requiresBiometric: requiresBiometric,
            },
          ),
        )),
      ) as _i7.Future<_i4.SecureSSHKey>);

  @override
  _i7.Future<_i4.SecureSSHKey> importKey({
    required String? name,
    required String? privateKey,
    required String? publicKey,
    String? passphrase,
    String? comment,
    _i4.SecurityLevel? securityLevel = _i4.SecurityLevel.medium,
    bool? requiresBiometric = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #importKey,
          [],
          {
            #name: name,
            #privateKey: privateKey,
            #publicKey: publicKey,
            #passphrase: passphrase,
            #comment: comment,
            #securityLevel: securityLevel,
            #requiresBiometric: requiresBiometric,
          },
        ),
        returnValue: _i7.Future<_i4.SecureSSHKey>.value(_FakeSecureSSHKey_4(
          this,
          Invocation.method(
            #importKey,
            [],
            {
              #name: name,
              #privateKey: privateKey,
              #publicKey: publicKey,
              #passphrase: passphrase,
              #comment: comment,
              #securityLevel: securityLevel,
              #requiresBiometric: requiresBiometric,
            },
          ),
        )),
      ) as _i7.Future<_i4.SecureSSHKey>);

  @override
  _i3.SecureSSHConnection? getConnection(String? hostId) =>
      (super.noSuchMethod(Invocation.method(
        #getConnection,
        [hostId],
      )) as _i3.SecureSSHConnection?);

  @override
  List<_i3.SecureSSHConnection> getActiveConnections() => (super.noSuchMethod(
        Invocation.method(
          #getActiveConnections,
          [],
        ),
        returnValue: <_i3.SecureSSHConnection>[],
      ) as List<_i3.SecureSSHConnection>);

  @override
  _i7.Future<void> disconnect(String? connectionId) => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [connectionId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> disconnectAll() => (super.noSuchMethod(
        Invocation.method(
          #disconnectAll,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> verifyHostKey(
    _i4.SecureHost? host,
    String? actualFingerprint,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyHostKey,
          [
            host,
            actualFingerprint,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> updateHostKey(
    _i4.SecureHost? host,
    String? newFingerprint,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHostKey,
          [
            host,
            newFingerprint,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  Map<String, dynamic> getConnectionStats() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i7.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [EnhancedAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnhancedAuthService extends _i1.Mock
    implements _i5.EnhancedAuthService {
  MockEnhancedAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.EnhancedAuthResult> login(
    String? username,
    String? password, {
    bool? requireBiometric = false,
    bool? rememberDevice = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            username,
            password,
          ],
          {
            #requireBiometric: requireBiometric,
            #rememberDevice: rememberDevice,
          },
        ),
        returnValue:
            _i7.Future<_i5.EnhancedAuthResult>.value(_FakeEnhancedAuthResult_5(
          this,
          Invocation.method(
            #login,
            [
              username,
              password,
            ],
            {
              #requireBiometric: requireBiometric,
              #rememberDevice: rememberDevice,
            },
          ),
        )),
      ) as _i7.Future<_i5.EnhancedAuthResult>);

  @override
  _i7.Future<_i5.EnhancedAuthResult> register(
    String? email,
    String? username,
    String? password, {
    bool? requireBiometric = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            username,
            password,
          ],
          {#requireBiometric: requireBiometric},
        ),
        returnValue:
            _i7.Future<_i5.EnhancedAuthResult>.value(_FakeEnhancedAuthResult_5(
          this,
          Invocation.method(
            #register,
            [
              email,
              username,
              password,
            ],
            {#requireBiometric: requireBiometric},
          ),
        )),
      ) as _i7.Future<_i5.EnhancedAuthResult>);

  @override
  _i7.Future<bool> hasValidSession() => (super.noSuchMethod(
        Invocation.method(
          #hasValidSession,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i12.User?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i7.Future<_i12.User?>.value(),
      ) as _i7.Future<_i12.User?>);

  @override
  _i7.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> changePassword(
    String? currentPassword,
    String? newPassword, {
    bool? requireBiometric = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [
            currentPassword,
            newPassword,
          ],
          {#requireBiometric: requireBiometric},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i5.TwoFactorSetupResult> setupTwoFactor() => (super.noSuchMethod(
        Invocation.method(
          #setupTwoFactor,
          [],
        ),
        returnValue: _i7.Future<_i5.TwoFactorSetupResult>.value(
            _FakeTwoFactorSetupResult_6(
          this,
          Invocation.method(
            #setupTwoFactor,
            [],
          ),
        )),
      ) as _i7.Future<_i5.TwoFactorSetupResult>);

  @override
  _i5.AuthSecurityStatus getSecurityStatus() => (super.noSuchMethod(
        Invocation.method(
          #getSecurityStatus,
          [],
        ),
        returnValue: _FakeAuthSecurityStatus_7(
          this,
          Invocation.method(
            #getSecurityStatus,
            [],
          ),
        ),
      ) as _i5.AuthSecurityStatus);
}
