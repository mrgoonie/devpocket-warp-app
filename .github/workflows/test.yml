name: DevPocket Test Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lib/**'
      - 'test/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'
  pull_request:
    branches: [ main ]
    paths:
      - 'lib/**'
      - 'test/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - performance
        - security

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'

jobs:
  # Unit Tests with Coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''

    strategy:
      fail-fast: false
      matrix:
        test-group:
          - services
          - models
          - providers
          - screens
          - widgets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run unit tests for ${{ matrix.test-group }}
        run: |
          if [ -d "test/${{ matrix.test-group }}" ]; then
            flutter test test/${{ matrix.test-group }}/ --coverage --reporter=expanded
          else
            echo "No tests found for ${{ matrix.test-group }}"
          fi

      - name: Upload coverage for ${{ matrix.test-group }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage/lcov.info

  # Integration Tests (Stable Suite Only)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''

    strategy:
      fail-fast: false
      matrix:
        test-suite:
          - stable_test_suite
          - main_tab_integration_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: flutter pub get

      - name: Enable KVM group permissions
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run ${{ matrix.test-suite }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          ram-size: 2048M
          heap-size: 1024M
          disk-size: 4096M
          script: |
            flutter test test/${{ matrix.test-suite }}.dart --coverage --reporter=expanded

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-results-${{ matrix.test-suite }}
          path: |
            test/screenshots/
            test/reports/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run performance tests
        run: |
          mkdir -p test/performance/reports
          flutter test test/performance/ --reporter=expanded > test/performance/reports/performance_results.txt 2>&1 || true

      - name: Generate performance report
        run: |
          echo "# Performance Test Report" > test/performance/reports/performance_report.md
          echo "Generated: $(date)" >> test/performance/reports/performance_report.md
          echo "" >> test/performance/reports/performance_report.md
          echo "## Results" >> test/performance/reports/performance_report.md
          echo '```' >> test/performance/reports/performance_report.md
          cat test/performance/reports/performance_results.txt >> test/performance/reports/performance_report.md
          echo '```' >> test/performance/reports/performance_report.md

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: test/performance/reports/

      - name: Comment performance results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'test/performance/reports/performance_report.md';
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 📊 Performance Test Results\n\n${report}`
              });
            }

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.test_type == 'security' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run security tests
        run: |
          if [ -d "test/security" ]; then
            flutter test test/security/ --reporter=expanded
          else
            echo "No security tests found"
          fi

      - name: Security audit
        run: |
          flutter pub deps --json > dependencies.json
          echo "Checking for known vulnerabilities..."
          # Basic dependency audit - can be enhanced with specialized tools
          cat dependencies.json | jq '.packages[] | select(.source == "hosted") | {name: .name, version: .version}'

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: |
            dependencies.json
            test/security/reports/

  # Test Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests]
    if: always() && (github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts

      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Merge coverage reports
        run: |
          mkdir -p coverage
          echo "Merging coverage files..."
          find coverage-artifacts -name "lcov.info" -exec cat {} \; > coverage/merged_lcov.info
          
          # Generate HTML report
          genhtml coverage/merged_lcov.info -o coverage/html --branch-coverage --function-coverage
          
          # Generate summary
          lcov --summary coverage/merged_lcov.info > coverage/summary.txt

      - name: Upload merged coverage
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage-report
          path: |
            coverage/html/
            coverage/summary.txt
            coverage/merged_lcov.info

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/merged_lcov.info
          flags: merged-tests
          name: codecov-merged

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('coverage/summary.txt', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 📊 Test Coverage Report\n\n\`\`\`\n${summary}\n\`\`\``
              });
            } catch (error) {
              console.log('Could not read coverage summary:', error.message);
            }

  # Test Result Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, coverage-report]
    if: always()

    steps:
      - name: Generate test summary
        run: |
          echo "# DevPocket Test Pipeline Summary" > test_summary.md
          echo "Generated: $(date)" >> test_summary.md
          echo "" >> test_summary.md
          
          echo "## Test Results" >> test_summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test_summary.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test_summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test_summary.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> test_summary.md
          echo "- Coverage Report: ${{ needs.coverage-report.result }}" >> test_summary.md
          
          # Determine overall status
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.performance-tests.result }}" == "success" && 
                "${{ needs.security-tests.result }}" == "success" ]]; then
            echo "✅ All tests passed" >> test_summary.md
            echo "OVERALL_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ Some tests failed" >> test_summary.md
            echo "OVERALL_STATUS=failure" >> $GITHUB_ENV
          fi

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test_summary.md

      - name: Post summary comment (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test_summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Fail workflow if tests failed
        if: env.OVERALL_STATUS == 'failure'
        run: |
          echo "Some tests failed. Check the individual job results for details."
          exit 1