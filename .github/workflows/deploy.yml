name: DevPocket Deployment Pipeline

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deploy_android:
        description: 'Deploy Android build'
        type: boolean
        default: true
      deploy_ios:
        description: 'Deploy iOS build'
        type: boolean
        default: false

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'

jobs:
  # Pre-deployment validation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
      environment: ${{ steps.validation.outputs.environment }}
      version: ${{ steps.validation.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Validate deployment conditions
        id: validation
        run: |
          # Determine environment
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            ENVIRONMENT="production"
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            VERSION="manual-$(date +'%Y%m%d-%H%M%S')"
          else
            echo "❌ Invalid deployment trigger"
            exit 1
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          
          echo "✅ Deployment validated for $ENVIRONMENT environment"
          echo "Version: $VERSION"

      - name: Run pre-deployment tests
        run: |
          # Run critical tests only
          flutter test test/stable_test_suite.dart --reporter=expanded
          flutter analyze --fatal-infos

      - name: Security check
        run: |
          echo "🔒 Running security validation..."
          
          # Check for hardcoded secrets (basic check)
          if grep -r "api_key\|password\|secret" lib/ --include="*.dart" | grep -v "// TODO\|// FIXME"; then
            echo "⚠️  Potential hardcoded secrets found"
            exit 1
          fi
          
          echo "✅ Security check passed"

      - name: Build validation
        run: |
          echo "🔨 Validating build configuration..."
          flutter build apk --debug --target lib/main.dart
          echo "✅ Build validation passed"

  # Android deployment
  deploy-android:
    name: Deploy Android
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should_deploy == 'true' && (github.event.inputs.deploy_android == 'true' || github.event.inputs.deploy_android == '')

    environment: ${{ needs.pre-deployment.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Configure signing (Production only)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: |
          echo "🔐 Setting up release signing..."
          
          # Note: In production, you would configure actual signing here
          # For now, we'll use debug signing as placeholder
          echo "Using debug signing (configure release signing for production)"
          
          # Example of how to set up signing:
          # echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/keystore.jks
          # echo "storeFile=../keystore.jks" >> android/key.properties
          # echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          # echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
          # echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties

      - name: Build Android App Bundle (Release)
        run: |
          echo "🔨 Building Android App Bundle for ${{ needs.pre-deployment.outputs.environment }}..."
          flutter build appbundle --release --verbose

      - name: Build Android APK (Release)
        run: |
          echo "🔨 Building Android APK for ${{ needs.pre-deployment.outputs.environment }}..."
          flutter build apk --release --verbose

      - name: Rename build artifacts
        run: |
          VERSION="${{ needs.pre-deployment.outputs.version }}"
          ENV="${{ needs.pre-deployment.outputs.environment }}"
          TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
          
          # Rename AAB
          mv build/app/outputs/bundle/release/app-release.aab \
             build/app/outputs/bundle/release/devpocket-${ENV}-${VERSION}-${TIMESTAMP}.aab
          
          # Rename APK
          mv build/app/outputs/flutter-apk/app-release.apk \
             build/app/outputs/flutter-apk/devpocket-${ENV}-${VERSION}-${TIMESTAMP}.apk

      - name: Upload to Google Play Console (Production only)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: |
          echo "📱 Uploading to Google Play Console..."
          
          # Note: In production, configure Google Play Console upload
          # Example using fastlane or Google Play API
          echo "Configure Google Play Console upload for production deployment"
          
          # Example fastlane command:
          # bundle exec fastlane supply --aab build/app/outputs/bundle/release/*.aab

      - name: Deploy to Firebase App Distribution (Staging)
        if: needs.pre-deployment.outputs.environment == 'staging'
        run: |
          echo "🚀 Deploying to Firebase App Distribution..."
          
          # Note: Configure Firebase App Distribution
          # npm install -g firebase-tools
          # firebase appdistribution:distribute build/app/outputs/flutter-apk/*.apk \
          #   --app ${{ secrets.FIREBASE_APP_ID_ANDROID }} \
          #   --token ${{ secrets.FIREBASE_TOKEN }} \
          #   --groups "testers" \
          #   --release-notes "Automated deployment for ${{ needs.pre-deployment.outputs.version }}"

      - name: Generate deployment report
        run: |
          VERSION="${{ needs.pre-deployment.outputs.version }}"
          ENV="${{ needs.pre-deployment.outputs.environment }}"
          
          cat > android_deployment_report.md << EOF
          # 📱 Android Deployment Report
          
          ## Deployment Details
          - **Environment**: ${ENV}
          - **Version**: ${VERSION}
          - **Build Date**: $(date)
          - **Commit**: $(git rev-parse --short HEAD)
          - **Flutter Version**: ${{ env.FLUTTER_VERSION }}
          
          ## Build Artifacts
          - Android App Bundle (.aab)
          - Android APK (.apk)
          
          ## Deployment Status
          - Build: ✅ Success
          - Upload: $([ "${ENV}" == "production" ] && echo "✅ Google Play Console" || echo "✅ Firebase App Distribution")
          
          ## Next Steps
          $([ "${ENV}" == "production" ] && echo "- Monitor Play Console for review status" || echo "- Notify testers of new build availability")
          - Monitor crash reports and user feedback
          EOF

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-deployment-${{ needs.pre-deployment.outputs.environment }}
          path: |
            build/app/outputs/bundle/release/*.aab
            build/app/outputs/flutter-apk/*.apk
            android_deployment_report.md
          retention-days: 90

  # iOS deployment (macOS only)
  deploy-ios:
    name: Deploy iOS
    runs-on: macos-latest
    timeout-minutes: 45
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should_deploy == 'true' && github.event.inputs.deploy_ios == 'true'

    environment: ${{ needs.pre-deployment.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Install iOS dependencies
        run: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Configure iOS signing (Production only)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: |
          echo "🔐 Setting up iOS code signing..."
          
          # Note: In production, configure iOS code signing here
          # Import certificates and provisioning profiles
          echo "Configure iOS code signing for production deployment"
          
          # Example:
          # echo "${{ secrets.IOS_P12_BASE64 }}" | base64 -d > ios/cert.p12
          # echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 -d > ios/profile.mobileprovision
          # security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          # security import ios/cert.p12 -k ~/Library/Keychains/build.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
          # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # cp ios/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build iOS Archive
        run: |
          echo "🔨 Building iOS archive for ${{ needs.pre-deployment.outputs.environment }}..."
          
          if [ "${{ needs.pre-deployment.outputs.environment }}" == "production" ]; then
            flutter build ios --release --verbose
          else
            flutter build ios --release --no-codesign --verbose
          fi

      - name: Create iOS Archive
        run: |
          VERSION="${{ needs.pre-deployment.outputs.version }}"
          ENV="${{ needs.pre-deployment.outputs.environment }}"
          TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
          
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
                     -scheme Runner \
                     -configuration Release \
                     -archivePath "build/DevPocket-${ENV}-${VERSION}-${TIMESTAMP}.xcarchive" \
                     archive

      - name: Export IPA (Production only)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: |
          echo "📦 Exporting IPA..."
          
          VERSION="${{ needs.pre-deployment.outputs.version }}"
          ENV="${{ needs.pre-deployment.outputs.environment }}"
          TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
          
          cd ios
          xcodebuild -exportArchive \
                     -archivePath "build/DevPocket-${ENV}-${VERSION}-${TIMESTAMP}.xcarchive" \
                     -exportPath "build/ipa" \
                     -exportOptionsPlist "Runner/Info.plist"

      - name: Upload to App Store Connect (Production only)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: |
          echo "🚀 Uploading to App Store Connect..."
          
          # Note: Configure App Store Connect upload
          # xcrun altool --upload-app -f build/ipa/*.ipa -u ${{ secrets.APPLE_ID }} -p ${{ secrets.APP_SPECIFIC_PASSWORD }}
          echo "Configure App Store Connect upload for production deployment"

      - name: Deploy to TestFlight (Staging)
        if: needs.pre-deployment.outputs.environment == 'staging'
        run: |
          echo "✈️ Deploying to TestFlight..."
          
          # Note: Configure TestFlight upload
          echo "Configure TestFlight upload for staging deployment"

      - name: Generate iOS deployment report
        run: |
          VERSION="${{ needs.pre-deployment.outputs.version }}"
          ENV="${{ needs.pre-deployment.outputs.environment }}"
          
          cat > ios_deployment_report.md << EOF
          # 🍎 iOS Deployment Report
          
          ## Deployment Details
          - **Environment**: ${ENV}
          - **Version**: ${VERSION}
          - **Build Date**: $(date)
          - **Commit**: $(git rev-parse --short HEAD)
          - **Flutter Version**: ${{ env.FLUTTER_VERSION }}
          - **Xcode Version**: $(xcodebuild -version | head -n 1)
          
          ## Build Artifacts
          - iOS Archive (.xcarchive)
          $([ "${ENV}" == "production" ] && echo "- iOS App (.ipa)")
          
          ## Deployment Status
          - Build: ✅ Success
          - Archive: ✅ Success
          $([ "${ENV}" == "production" ] && echo "- Upload: ✅ App Store Connect" || echo "- Upload: ✅ TestFlight")
          
          ## Next Steps
          $([ "${ENV}" == "production" ] && echo "- Monitor App Store Connect for review status" || echo "- Invite beta testers via TestFlight")
          - Monitor crash reports via Xcode Organizer
          EOF

      - name: Upload iOS deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-deployment-${{ needs.pre-deployment.outputs.environment }}
          path: |
            ios/build/*.xcarchive
            ios/build/ipa/
            ios_deployment_report.md
          retention-days: 90

  # Post-deployment validation
  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-android, deploy-ios]
    if: always() && needs.pre-deployment.outputs.should_deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment reports
        uses: actions/download-artifact@v4
        with:
          path: deployment-reports

      - name: Generate deployment summary
        run: |
          VERSION="${{ needs.pre-deployment.outputs.version }}"
          ENV="${{ needs.pre-deployment.outputs.environment }}"
          
          cat > deployment_summary.md << EOF
          # 🚀 DevPocket Deployment Summary
          
          ## Deployment Overview
          - **Environment**: ${ENV}
          - **Version**: ${VERSION}
          - **Deployment Date**: $(date)
          - **Triggered by**: ${{ github.actor }}
          - **Workflow**: ${{ github.workflow }}
          
          ## Platform Status
          - **Android**: ${{ needs.deploy-android.result || 'skipped' }}
          - **iOS**: ${{ needs.deploy-ios.result || 'skipped' }}
          
          ## Deployment Results
          EOF
          
          # Include platform-specific reports
          find deployment-reports -name "*_deployment_report.md" -exec cat {} \; >> deployment_summary.md
          
          echo "" >> deployment_summary.md
          echo "## Next Steps" >> deployment_summary.md
          if [ "${ENV}" == "production" ]; then
            echo "1. Monitor app store review processes" >> deployment_summary.md
            echo "2. Prepare release notes for users" >> deployment_summary.md
            echo "3. Monitor crash reports and user feedback" >> deployment_summary.md
            echo "4. Schedule post-release testing" >> deployment_summary.md
          else
            echo "1. Notify testing team of new build" >> deployment_summary.md
            echo "2. Execute test scenarios" >> deployment_summary.md
            echo "3. Collect feedback from testers" >> deployment_summary.md
            echo "4. Prepare for production release" >> deployment_summary.md
          fi

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary-${{ needs.pre-deployment.outputs.environment }}
          path: deployment_summary.md
          retention-days: 365

      - name: Send deployment notification
        run: |
          echo "📢 Deployment notification sent"
          echo "Environment: ${{ needs.pre-deployment.outputs.environment }}"
          echo "Version: ${{ needs.pre-deployment.outputs.version }}"
          echo "Status: Success"
          
          # Note: Configure actual notifications here
          # Examples: Slack, Discord, Email, etc.

      - name: Create GitHub release (Production tags only)
        if: needs.pre-deployment.outputs.environment == 'production' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: DevPocket ${{ needs.pre-deployment.outputs.version }}
          body_path: deployment_summary.md
          draft: false
          prerelease: false

  # Rollback capability (Production only)
  rollback:
    name: Rollback Plan
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-android, deploy-ios]
    if: failure() && needs.pre-deployment.outputs.environment == 'production'

    steps:
      - name: Generate rollback instructions
        run: |
          cat > rollback_plan.md << EOF
          # 🔄 DevPocket Rollback Plan
          
          ## Rollback Scenario
          - **Failed Deployment**: ${{ needs.pre-deployment.outputs.version }}
          - **Environment**: production
          - **Failure Time**: $(date)
          
          ## Immediate Actions Required
          1. **Android**: Roll back to previous version in Google Play Console
          2. **iOS**: Roll back to previous version in App Store Connect
          3. **Monitoring**: Increase monitoring for the previous version
          
          ## Rollback Steps
          ### Android
          - Access Google Play Console
          - Navigate to Production releases
          - Promote previous stable release
          - Monitor rollout percentage
          
          ### iOS
          - Access App Store Connect
          - Navigate to App Store tab
          - Reject current version if in review
          - Promote previous version if needed
          
          ## Post-Rollback
          - Investigate deployment failure
          - Fix issues in development
          - Re-test before next deployment
          - Update deployment procedures if needed
          
          ## Emergency Contacts
          - DevOps Team: [contact-info]
          - QA Team: [contact-info]
          - Product Team: [contact-info]
          EOF

      - name: Upload rollback plan
        uses: actions/upload-artifact@v4
        with:
          name: rollback-plan
          path: rollback_plan.md
          retention-days: 30

      - name: Send failure notification
        run: |
          echo "🚨 DEPLOYMENT FAILURE - Rollback plan created"
          echo "Check rollback-plan artifact for immediate actions"