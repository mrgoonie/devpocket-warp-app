name: DevPocket Build Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of build to create'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release
        - both

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'

jobs:
  # Build Android APK and AAB
  android-build:
    name: Android Build
    runs-on: ubuntu-latest
    timeout-minutes: 40

    strategy:
      fail-fast: false
      matrix:
        build-type: 
          - ${{ (github.event.inputs.build_type == 'both' && 'debug') || (github.event.inputs.build_type == 'both' && 'release') || github.event.inputs.build_type || 'debug' }}
          - ${{ github.event.inputs.build_type == 'both' && 'release' || null }}
        exclude:
          - build-type: null

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Accept Android licenses
        run: yes | flutter doctor --android-licenses

      - name: Build Android APK (${{ matrix.build-type }})
        run: |
          if [ "${{ matrix.build-type }}" == "debug" ]; then
            flutter build apk --debug --verbose
          else
            flutter build apk --release --verbose
          fi

      - name: Build Android App Bundle (${{ matrix.build-type }})
        if: matrix.build-type == 'release'
        run: flutter build appbundle --release --verbose

      - name: Get build info
        id: build-info
        run: |
          echo "build_date=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
          echo "flutter_version=$(flutter --version | head -n 1 | cut -d ' ' -f 2)" >> $GITHUB_OUTPUT
          echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Rename APK files
        run: |
          BUILD_TYPE="${{ matrix.build-type }}"
          BUILD_DATE="${{ steps.build-info.outputs.build_date }}"
          COMMIT_SHA="${{ steps.build-info.outputs.commit_sha }}"
          
          if [ "$BUILD_TYPE" == "debug" ]; then
            mv build/app/outputs/flutter-apk/app-debug.apk \
               build/app/outputs/flutter-apk/devpocket-${BUILD_TYPE}-${BUILD_DATE}-${COMMIT_SHA}.apk
          else
            mv build/app/outputs/flutter-apk/app-release.apk \
               build/app/outputs/flutter-apk/devpocket-${BUILD_TYPE}-${BUILD_DATE}-${COMMIT_SHA}.apk
          fi

      - name: Rename AAB file
        if: matrix.build-type == 'release'
        run: |
          BUILD_DATE="${{ steps.build-info.outputs.build_date }}"
          COMMIT_SHA="${{ steps.build-info.outputs.commit_sha }}"
          
          mv build/app/outputs/bundle/release/app-release.aab \
             build/app/outputs/bundle/release/devpocket-release-${BUILD_DATE}-${COMMIT_SHA}.aab

      - name: Generate build metadata
        run: |
          BUILD_TYPE="${{ matrix.build-type }}"
          mkdir -p build_metadata
          
          cat > build_metadata/build-info-${BUILD_TYPE}.json << EOF
          {
            "build_type": "${BUILD_TYPE}",
            "build_date": "${{ steps.build-info.outputs.build_date }}",
            "commit_sha": "${{ steps.build-info.outputs.commit_sha }}",
            "flutter_version": "${{ steps.build-info.outputs.flutter_version }}",
            "android_api_level": "${{ env.ANDROID_API_LEVEL }}",
            "java_version": "${{ env.JAVA_VERSION }}",
            "workflow_run": "${{ github.run_number }}",
            "git_ref": "${{ github.ref }}",
            "git_event": "${{ github.event_name }}"
          }
          EOF

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ matrix.build-type }}
          path: |
            build/app/outputs/flutter-apk/*.apk
            build_metadata/build-info-${{ matrix.build-type }}.json
          retention-days: 30

      - name: Upload AAB artifact
        if: matrix.build-type == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: android-aab-release
          path: |
            build/app/outputs/bundle/release/*.aab
            build_metadata/build-info-release.json
          retention-days: 30

      - name: Calculate APK size and create report
        run: |
          BUILD_TYPE="${{ matrix.build-type }}"
          APK_FILE=$(find build/app/outputs/flutter-apk/ -name "*.apk" | head -n 1)
          APK_SIZE=$(stat -c%s "$APK_FILE")
          APK_SIZE_MB=$(echo "scale=2; $APK_SIZE / 1024 / 1024" | bc)
          
          echo "## 📱 Android Build Report ($BUILD_TYPE)" > build_report_${BUILD_TYPE}.md
          echo "" >> build_report_${BUILD_TYPE}.md
          echo "- **Build Type**: $BUILD_TYPE" >> build_report_${BUILD_TYPE}.md
          echo "- **APK Size**: ${APK_SIZE_MB} MB" >> build_report_${BUILD_TYPE}.md
          echo "- **Build Date**: ${{ steps.build-info.outputs.build_date }}" >> build_report_${BUILD_TYPE}.md
          echo "- **Commit**: ${{ steps.build-info.outputs.commit_sha }}" >> build_report_${BUILD_TYPE}.md
          echo "- **Flutter**: ${{ steps.build-info.outputs.flutter_version }}" >> build_report_${BUILD_TYPE}.md
          
          if [ "$BUILD_TYPE" == "release" ] && [ -f "build/app/outputs/bundle/release/*.aab" ]; then
            AAB_FILE=$(find build/app/outputs/bundle/release/ -name "*.aab" | head -n 1)
            AAB_SIZE=$(stat -c%s "$AAB_FILE")
            AAB_SIZE_MB=$(echo "scale=2; $AAB_SIZE / 1024 / 1024" | bc)
            echo "- **AAB Size**: ${AAB_SIZE_MB} MB" >> build_report_${BUILD_TYPE}.md
          fi

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: android-build-report-${{ matrix.build-type }}
          path: build_report_${{ matrix.build-type }}.md

  # Build iOS (macOS only)
  ios-build:
    name: iOS Build
    runs-on: macos-latest
    timeout-minutes: 40
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'ios-build')

    strategy:
      fail-fast: false
      matrix:
        build-type: 
          - ${{ (github.event.inputs.build_type == 'both' && 'debug') || (github.event.inputs.build_type == 'both' && 'release') || github.event.inputs.build_type || 'debug' }}
          - ${{ github.event.inputs.build_type == 'both' && 'release' || null }}
        exclude:
          - build-type: null

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Install iOS dependencies
        run: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Get build info
        id: build-info
        run: |
          echo "build_date=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
          echo "flutter_version=$(flutter --version | head -n 1 | cut -d ' ' -f 2)" >> $GITHUB_OUTPUT
          echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build iOS (${{ matrix.build-type }})
        run: |
          if [ "${{ matrix.build-type }}" == "debug" ]; then
            flutter build ios --debug --no-codesign --verbose
          else
            flutter build ios --release --no-codesign --verbose
          fi

      - name: Archive iOS app
        run: |
          BUILD_TYPE="${{ matrix.build-type }}"
          BUILD_DATE="${{ steps.build-info.outputs.build_date }}"
          COMMIT_SHA="${{ steps.build-info.outputs.commit_sha }}"
          
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
                     -scheme Runner \
                     -configuration $([ "$BUILD_TYPE" == "debug" ] && echo "Debug" || echo "Release") \
                     -archivePath "build/Runner-${BUILD_TYPE}-${BUILD_DATE}-${COMMIT_SHA}.xcarchive" \
                     archive

      - name: Generate iOS build metadata
        run: |
          BUILD_TYPE="${{ matrix.build-type }}"
          mkdir -p build_metadata
          
          cat > build_metadata/ios-build-info-${BUILD_TYPE}.json << EOF
          {
            "build_type": "${BUILD_TYPE}",
            "build_date": "${{ steps.build-info.outputs.build_date }}",
            "commit_sha": "${{ steps.build-info.outputs.commit_sha }}",
            "flutter_version": "${{ steps.build-info.outputs.flutter_version }}",
            "xcode_version": "$(xcodebuild -version | head -n 1)",
            "workflow_run": "${{ github.run_number }}",
            "git_ref": "${{ github.ref }}",
            "git_event": "${{ github.event_name }}"
          }
          EOF

      - name: Upload iOS archive
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive-${{ matrix.build-type }}
          path: |
            ios/build/*.xcarchive
            build_metadata/ios-build-info-${{ matrix.build-type }}.json
          retention-days: 30

      - name: Create iOS build report
        run: |
          BUILD_TYPE="${{ matrix.build-type }}"
          ARCHIVE_PATH="ios/build/Runner-${BUILD_TYPE}-${{ steps.build-info.outputs.build_date }}-${{ steps.build-info.outputs.commit_sha }}.xcarchive"
          
          echo "## 🍎 iOS Build Report ($BUILD_TYPE)" > ios_build_report_${BUILD_TYPE}.md
          echo "" >> ios_build_report_${BUILD_TYPE}.md
          echo "- **Build Type**: $BUILD_TYPE" >> ios_build_report_${BUILD_TYPE}.md
          echo "- **Build Date**: ${{ steps.build-info.outputs.build_date }}" >> ios_build_report_${BUILD_TYPE}.md
          echo "- **Commit**: ${{ steps.build-info.outputs.commit_sha }}" >> ios_build_report_${BUILD_TYPE}.md
          echo "- **Flutter**: ${{ steps.build-info.outputs.flutter_version }}" >> ios_build_report_${BUILD_TYPE}.md
          echo "- **Xcode**: $(xcodebuild -version | head -n 1)" >> ios_build_report_${BUILD_TYPE}.md
          
          if [ -f "$ARCHIVE_PATH" ]; then
            ARCHIVE_SIZE=$(du -sh "$ARCHIVE_PATH" | cut -f1)
            echo "- **Archive Size**: $ARCHIVE_SIZE" >> ios_build_report_${BUILD_TYPE}.md
          fi

      - name: Upload iOS build report
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-report-${{ matrix.build-type }}
          path: ios_build_report_${{ matrix.build-type }}.md

  # Build Performance Analysis
  build-analysis:
    name: Build Performance Analysis
    runs-on: ubuntu-latest
    needs: [android-build]
    if: always()

    steps:
      - name: Download build reports
        uses: actions/download-artifact@v4
        with:
          path: build-reports

      - name: Analyze build performance
        run: |
          echo "# 📊 Build Performance Analysis" > build_analysis.md
          echo "Generated: $(date)" >> build_analysis.md
          echo "" >> build_analysis.md
          
          # Process Android build reports
          find build-reports -name "build_report_*.md" -exec cat {} \; >> build_analysis.md
          
          # Process iOS build reports if available
          find build-reports -name "ios_build_report_*.md" -exec cat {} \; >> build_analysis.md
          
          echo "" >> build_analysis.md
          echo "## Build Status Summary" >> build_analysis.md
          echo "- Android Build: ${{ needs.android-build.result }}" >> build_analysis.md
          if [ "${{ needs.ios-build.result }}" != "" ]; then
            echo "- iOS Build: ${{ needs.ios-build.result }}" >> build_analysis.md
          fi

      - name: Upload build analysis
        uses: actions/upload-artifact@v4
        with:
          name: build-analysis
          path: build_analysis.md

      - name: Comment build results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysis = fs.readFileSync('build_analysis.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysis
            });

  # Release Preparation (Tags only)
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [android-build, ios-build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy Android assets
          find release-artifacts -name "*.apk" -exec cp {} release-assets/ \;
          find release-artifacts -name "*.aab" -exec cp {} release-assets/ \;
          
          # Copy iOS assets (if available)
          find release-artifacts -name "*.xcarchive" -exec cp -r {} release-assets/ \;
          
          # Copy build metadata
          find release-artifacts -name "build-info-*.json" -exec cp {} release-assets/ \;
          find release-artifacts -name "ios-build-info-*.json" -exec cp {} release-assets/ \;

      - name: Generate release notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "# DevPocket Release ${TAG_NAME}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## What's Changed" >> RELEASE_NOTES.md
          echo "- Release build for ${TAG_NAME}" >> RELEASE_NOTES.md
          echo "- Built with Flutter ${{ env.FLUTTER_VERSION }}" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Build Assets" >> RELEASE_NOTES.md
          echo "- Android APK (Release)" >> RELEASE_NOTES.md
          echo "- Android App Bundle (Release)" >> RELEASE_NOTES.md
          if [ -d "release-assets/*.xcarchive" ]; then
            echo "- iOS Archive (Release)" >> RELEASE_NOTES.md
          fi

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            release-assets/
            RELEASE_NOTES.md
          retention-days: 90

  # Cleanup old artifacts
  cleanup:
    name: Cleanup Build Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [android-build, ios-build, build-analysis]

    steps:
      - name: Delete old build artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            android-apk-debug
            android-build-report-debug
            ios-archive-debug
            ios-build-report-debug
          failOnError: false
          token: ${{ secrets.GITHUB_TOKEN }}
          retentionDays: 7